import org.scalatest.funsuite.AnyFunSuite

import scala.concurrent.Await
import rk.darkages.{DBAgent, Util}

import scala.concurrent.duration.Duration
import com.typesafe.scalalogging.Logger

class DBTestSuite extends AnyFunSuite:
  def _log: Logger = Util.getLogger("DBTestSuite")

  lazy val sDBFile: String =
    val dbDir = System.getProperty("java.io.tmpdir")
    s"${dbDir}/test_db"

  lazy val db: DBAgent =
    DBAgent(url=s"jdbc:h2:$sDBFile", username="", password="", poolSize=1)

  lazy val testDb: DBAgent =
    db.query("CREATE MEMORY TABLE IF NOT EXISTS t1(a INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY , b VARCHAR(100));")
    db.query("CREATE MEMORY TABLE IF NOT EXISTS t2(x INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, y VARCHAR(100));")
    db

  test("單獨SQL DDL"){
    val xdb = testDb
    xdb.query("INSERT INTO t1(b) VALUES('test1')")
    xdb.query("INSERT INTO t1(b) VALUES('test2')")
    val rs = xdb.query("SELECT a, b FROM t1;")
    val xrs = rs.singleReturning
    xrs.next()
    assert(xrs.getInt(1)>=1)
    //assert(xrs.getString(2)=="test1")
  }

  test("SqlJob測試") {
    val sj = DBAgent.SqlJob()
    sj.addSql("INSERT INTO t1(b) VALUES(?);", Seq("j1"))
    sj.addSql("INSERT INTO t1(b) VALUES(?);", Seq("j2"))
    sj.addSql("INSERT INTO t1(b) VALUES(?);", Seq("j3"))
    sj.addSql("UPDATE t1 SET b=? WHERE b=?;", Seq("test1", "J8"))
    sj.addSql("UPDATE t1 SET b=? WHERE b=?;", Seq("test2", "J9"))

    import scala.util.Success

    import scala.concurrent.ExecutionContext
    import scala.concurrent.ExecutionContext.global
    given ExecutionContext = global
    val xdb = testDb
    val f = xdb.execJob(sj)
    f.onComplete({_ match
      case Success(v) =>
        _log.debug("=========")
        val rs = xdb.query("SELECT a, b FROM t1 ORDER BY b;")
        val xrs = rs.singleReturning
        xrs.next()
        assert(xrs.getInt(1) >= 1)
        assert(xrs.getString(2) == "j1")
      case _ =>
    })(using global)
    Await.ready(f, Duration.Inf)

  }

